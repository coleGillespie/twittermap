// An interface between Mongo and Telegraph
// ---------------------------------------------------------------------- //

var redis = require('redis')
,   print = require("util").print;

// ---------------------------------------------------------------------- //

module.exports.install = function(server) {
    
    var client = server.client = redis.createClient();

    client.on("connect", function() {
        server.info("Redis ".cyan.bold + "is connected at " + client.host.cyan.bold + ":" + client.port.toString().cyan.bold);
    });
    
    client.on("error", function (err) {
        server.error(client.host + ":" + client.port + " - " + err);
    });


    client.on("subscribe", function (channel, count) {
        console.log("Pubsub!");
    });

    
    // Setup the Models
    // -------------------------------------------------- //

    Telegraph.Model = function(name, schema) {
        
        var m = this;

        m.name = name;

        // Generate the schema
        // -------------------------------------------------- //
        
        m.schema = {};
        
        for (var i in schema) {
            m.schema[i] = (typeof schema[i] === 'object') ? schema[i] : { type: schema[i] };
        }

        
        // Create
        // Used to create documents
        // -------------------------------------------------- //

        m.create = function(id, data, callback) {

            for (var i in data) {
                
                if (typeof data[i] !== typeof m.schema[i].type()) { return server.error (i + " must be a " + typeof schema[i]()); }
                if (schema[i].validation && schema[i].validation(data[i]) === false) { return server.error(i + " " + data[i].message); }

                data[i] = data[i] || schema[i].default;

            };

            server.info("attempting to write " + JSON.stringify(data));

            db.insert(data, id, callback || function(err) { 
                if (err) { return server.error(err); }
                return server.info("successfully created record for " + id + " in " + name);
            });

        };
        
        // Get
        // Used to read documents
        // -------------------------------------------------- //

        m.get = client.get;
        

        // Update
        // Used to update documents
        // -------------------------------------------------- //

        m.update = function(id, data, callback) {
            
            // Get the record
            db.get(id, function(err, val) {
                if (err) { throw err; }
                server.info("attempting to update " + id + " in " + name);
                // Update the record
                db.insert(val, function(err) {
                    if (err) { return server.error(err) }
                    server.info("successfully updated record for " + id + " in " + name);
                    callback && callback();
                });
            });
            
        };


        // Destroy
        // Used to destroy documents
        // -------------------------------------------------- //

        m.destroy = client.destroy;


        // Attach
        // Used to attach files to documents
        // -------------------------------------------------- //

        m.attach = function(id, name, file, format) {
            var readStream = fs.createReadStream(file);
            readStream.pipe(db.attachment.insert(id, name, null, format));
        }

    };
};
