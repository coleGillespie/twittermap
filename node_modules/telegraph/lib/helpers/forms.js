// A flash notification helper
module.exports = function(context) {

    var form_helper = {

        form: function(req) {
            
            var fn = arguments.callee;

            function token() {
                return req.session._csrf;
            }
            
            // Start a form
            // -------------------------------------------------- //

            fn.start = function(target, options) {

                fn.target = target.toLowerCase();
                
                var rest_method = options.method || "post";
                
                var settings = _.extend({
                    method: "post"
                }, options);

                // Now let's make sure we sort out the methods correctly
                // -------------------------------------------------- //

                settings.method = (options.method === "put" || options.method === "delete") ? "post" : settings.method;
                
                var form = '<form ';

                for (var o in settings) {
                    form += o + '="' + settings[o] + '"';
                }

                form += ">";

                // Anti CSRF
                if (context.csrf) {
                    form += "<input type='hidden' name='_csrf' value='" + token() + "' />";
                }

                // Greater support for REST 
                form += _.template('<input type="hidden" value="<%= _method %>" name="_method" />', { '_method': rest_method });
                
                return form;
            };


            // End the form
            // -------------------------------------------------- //

            fn.end = function() {
                delete fn.target;
                delete fn.resource;
                return "</form>";
            };
            

            // Elements
            // -------------------------------------------------- //

            fn.input_field = function(type, prop, options) {
                
                var input = '<input ';

                options.type = type;

                options.id = options.id || fn.target + "[" + prop + "]";
                options.name = options.name || fn.target + "[" + prop + "]";
                
                options.placeholder = options.placeholder || "";              

                for (var o in options) {
                    input += o + '="' + options[o] + '" ';
                }

                return input += "/>";
            };
            

            // Mass-generate standard fields
            // -------------------------------------------------- //
            ['text', 'url', 'date', 'password', 'number', 'radio', 'checkbox'].forEach(function(type, d) {
                fn[type + "_field"] = function(prop, options) {
                    return fn.input_field.apply(fn, [type, prop, options]);
                };
            });
            

            // We create a custom function for the email field 
            // because we want to prevent auto-capitalization
            // -------------------------------------------------- //
            fn.email_field = function(prop, options) {
                var email_options = _.extend({
                    autocorrect    : "off",
                    autocapitalize : "off"
                },options);

                return fn.input_field.apply(fn, ["email", prop, email_options]);
            };


            // The label field
            // -------------------------------------------------- //
            fn.label = function(prop, text, options) {
                return '<label for="' + this.target + '[' + prop + ']">' + (text || prop) + '</label>';
            };


            // The select field
            // -------------------------------------------------- //
            fn.select = function(prop, data, options) {

                var select = '<select id="' + this.target + "[" + prop + ']" name="' + this.target + "[" + prop + ']" ';
                
                for (var o in options) {
                    select += o + '="' + options[o] + '"';
                } 
                
                select += ">";

                for (var d in data) {
                    select += '<option value="' + d + '">' + data[d] + "</option>";
                }
                
                select += "</select>";

                return select;
            };
            
            return fn;
            
        }

    };

    context.express.dynamicHelpers(form_helper);

};
