// The Wiretap
//
// An observer style object that watches for changes
// in routes and websocket events
// -------------------------------------------------- //

// A constant for later reference
var restful_resources = ["index", "create", "read", "update", "delete"];

module.exports = function installWiretap (server) {

  var websockets = server.websockets;

  // Behavior(sockets)
  //
  // An object to infuse events with.
  // If websockets are enabled, then the socket object can be used
  // To bind socket.io events
  function Behavior(Func, path) {

    var sockets = {}
    ,   name    = (path) ? path : "index";

    // First, let's get all the potential socket events
    Func.call(null, sockets);

    // Next, if there are any socket events and websockets haven't
    // been enabled, throw an error
    if (Object.keys(sockets).length > 0 && websockets === false) {
      return server.warn("Wiretap for " + name.bold + " has websocket events, but they are not enabled");
    }

    // Now that we've done the proper CYA, let's add websocket events

    function register (path) {
      server.on(path, function(data) { 
        sockets[path].call(server, data); 
      });
      server.receive(path, function(data) { 
        server.emit(path, data); 
      });
    }

    for (var s in sockets) {
      register(s);
    }
    
    // Now, let's return the object
    return new Func({});
  }


  // Wiretap(A, B)
  //
  // argument A should be a string resource name
  // argument B should be a function of behaviors
  //
  // note: this function allows for polymorphism

  server.Wiretap = function Wiretap (a, b) {

    // For this to work, we need to have a function to generate
    // routes from. Let's check for that now:
    if (typeof a !== "string" && typeof a !== "function") {
      throw "Telegraph Error: Invalid resource name for Wiretap".red;
    }

    // Okay, we're good to go. Now let's take care of business

    var self       = Wiretap
    ,   express    = server.express

    ,   events     = (typeof a === "string") ? new Behavior(b, a) : new Behavior(a, b)
    ,   resource   = (typeof a === "string") ? "/" + a : ""
    ,   index      = (resource === "") ? "/" : resource

    ,   restful    = [
      { name : 'index'  ,  method : 'get'    ,  route : index },
      { name : 'create' ,  method : 'post'   ,  route : resource + '/create' },
      { name : 'read'   ,  method : 'get'    ,  route : resource + '/:id' },
      { name : 'update' ,  method : 'put'    ,  route : resource + '/update/:id' },
      { name : 'delete' ,  method : 'delete' ,  route : resource + '/delete/:id' }
    ];
    
    // Add non-RESTful routes as GET requests
    for (var e in events) {
      if (restful_resources.indexOf(e) === -1) {
        express.get(resource + "/" + e, events[e]);
      }
    }

    // Add RESTful routes
    restful.forEach(function(r) {
      if (events[r.name]) {
        express[r.method](r.route, events[r.name]);
      }
    });

  };

};
