var everyauth = require('everyauth');

module.exports = function(context) {
    
    everyauth
        .password
        .loginWith('email')
        .getLoginPath('/login')
        .postLoginPath('/login')
        .loginView('login.ejs')
        .loginLocals( function (req, res, done) {
            setTimeout( function () {
                done(null, {
                    title: 'Async login'
                });
            }, 200);
        })
        .authenticate( function (login, password) {
            var errors = [];
            if (!login) errors.push('Missing login');
            if (!password) errors.push('Missing password');
            if (errors.length) return errors;
            var user = usersByLogin[login];
            if (!user) return ['Login failed'];
            if (user.password !== password) return ['Login failed'];
            return user;
        })
        .getRegisterPath('/register')
        .postRegisterPath('/register')
        .registerView('register.jade')
        .registerLocals( function (req, res, done) {
            setTimeout( function () {
                done(null, {
                    title: 'Async Register'
                });
            }, 200);
        })
        .validateRegistration( function (newUserAttrs, errors) {
            var login = newUserAttrs.login;
            if (usersByLogin[login]) errors.push('Login already taken');
            return errors;
        })
        .registerUser( function (newUserAttrs) {
            var login = newUserAttrs[this.loginKey()];
            return usersByLogin[login] = addUser(newUserAttrs);
        })

        .loginSuccessRedirect('/')
        .registerSuccessRedirect('/');

    // Everyauth authentication
    context.use(everyauth.middleware);


    return everyauth

}
