// Telegraph Server
// Nate Hunzaker
//
// A framework based on Backbone for event driven applications


//-- Requirements ------------------------------------------------------//

// Side Dishes
require('colors');

var _            = require('underscore')
,   EventEmitter = require("events").EventEmitter
,   ejs          = require('ejs')
,   async        = require("async")
,   express      = require('express')
,   config       = require("konphyg")(process.cwd() + "/config");
;

module.exports = Telegraph = function (options) {
  
  //-- Defaults -------------------------------------------------------//

  var settings = {
    'appname'        : "Telegraph",
    'routes'         : [],
    'silent_mode'    : false,
    'websockets'     : false
  },

  self = this;

  // Add Default Overides
  _.extend(self, settings, options);

  // Enable wiretaps
  require("./wiretap.js")(self);

  // Enable process listeners
  self._process_listeners();

};

Telegraph.prototype = new EventEmitter;

// Backbone Server Functionality
_.extend(Telegraph.prototype, {
  
  load: require("./helpers/utilities").load,
  
  //-- Reporting -----------------------------------------------------//
  
  info: function(message) {
    this.silent_mode || console.info("   info  - ".cyan + message);
    return this;
  },
  
  error: function(message) {
    this.silent_mode || console.error("  error  - ".red.bold + message);
    return this;
  },

  warn: function(message) {
    this.silent_mode || console.warn("   warn  - ".yellow + message);
    return this;
  },

  success: function(message) {
    this.silent_mode || console.warn("success  - ".green.bold + message);
    return this;
  },

  //-- Connect Configuration Methods ---------------------------------//

  use: function(middleware, config) {
    
    if (typeof middleware === "string") {
      middleware = express[middleware](config);            
    }

    this.express.use(middleware, config);

    return this;
  },
  
  set: function(name, config) {
    this.express.set(name, config);

    return this;
  },

  //-- Async Methods  -----------------------------------------------//
  
  async: async,
  
  //-- Database Methods  --------------------------------------------//
  
  _db_connect: function() {

    var env = global.NODE_ENV || "development";

    this.database = config("database")[env];
    if ("database" in this) require("./database").setup(this);

  },

  //-- Server Methods ------------------------------------------------//

  start: function(port) {   
    
    var self = this
    ,   pdir = process.cwd() + "/public";
    
    port = port || 4000;

    // Start the thing
    var server = self.express = express.createServer(
      
      // Sessions
      express.cookieParser(),
      express.session({ secret: require("./helpers/sessions").hash() }),
      
      // Static Assets
      express.favicon(),
      express.static(pdir)
      
    );

    // Set view engine settings
    server.set("views", "app/views");
    server.set("view engine", "ejs");
    server.set("view options", {
      layout: process.cwd() + "/app/views/layout"
    });
    
    // Set Form Helpers
    self.use("bodyParser");
    self.use("csrf");        
    self.use("methodOverride");
    require("./helpers/forms")(self);

    // Connect database
    self._db_connect();

    // Sockets
    self.websockets && require("./websockets").setup(self);

    // Load App Files
    self.load("app/models").load("app");

    // Sockets
    self.websockets && require("./websockets").install(self);

    self.express.listen(port);

    self.info(self.appname.toString().cyan + " is listening on port " + port.toString().cyan);

    return this;

  },
  
  _process_listeners: function() {

    var self = this;

    process.on("message", function(data) {

      switch(data.message) {
        
      case "start": 
        self.start(data.port); break;
        
      case "stop" :
        process.exit(); 
        break;
      }
    });
    
  }
  
});
